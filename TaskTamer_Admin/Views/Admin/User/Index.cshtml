@using TaskTamer_Application.Contracts
@model IEnumerable<UserDTO>
@{
    ViewData["Title"] = "Управление пользователями";
}

<div class="container-fluid">
    <div class="row" style="overflow: visible;">
        <!-- Боковая панель -->
        <div class="col-md-2 sidebar" style="position: sticky; top: 35px; height: fit-content;">
            <partial name="NavPanel" />
        </div>

        <!-- Основное содержимое -->
        <div class="col-md-10 main-content">

            @if (ViewBag.Message.message != null)
            {
                <div class="alert alert-@ViewBag.Message.messageType alert-dismissible fade show mt-3" role="alert">
                    @ViewBag.Message.message                    
                </div>
            }


            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="page-title">
                    <i class="fas fa-users mr-2"></i>Список пользователей
                </h1>
                <a href="@Url.Action("Create", "User")" class="btn btn-success btn-lg">
                    <i class="fas fa-plus-circle mr-2"></i> Новый пользователь
                </a>
            </div>

            <div class="card shadow-sm">
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover m-0">
                            <thead class="thead-light">
                                <tr>
                                    <th scope="col" class="text-dark font-weight-bold">ID</th>
                                    <th scope="col" class="text-dark font-weight-bold">Логин</th>
                                    <th scope="col" class="text-dark font-weight-bold">Сотрудник</th>
                                    <th scope="col" class="text-dark font-weight-bold">Роль</th>
                                    <th scope="col" class="text-dark font-weight-bold">Дата регистрации</th>
                                    <th scope="col" class="text-dark font-weight-bold">Статус</th>
                                    <th scope="col" class="text-dark font-weight-bold text-center">Действия</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in Model)
                                {
                                    <tr class="align-middle">
                                        <td class="text-dark font-weight-semibold">@user.UserID</td>
                                        <td class="text-primary font-weight-semibold">@user.Username</td>
                                        <td>
                                            @if (user.employeeDTO != null)
                                            {
                                                <span class="text-dark font-weight-semibold">@user.employeeDTO.FullName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Не указан</span>
                                            }
                                        </td>
                                        <td>
                                            @if (user.roleDTO != null)
                                            {
                                                <span class="badge badge-pill"
                                                      style="background-color: @GetRoleColor(user.roleDTO.Name); color: white">
                                                    @user.roleDTO.Name
                                                </span>
                                            }
                                        </td>
                                        <td class="text-dark">@user.RegistrationDate.ToString("dd.MM.yyyy")</td>
                                        <td>
                                            <span id="status-badge-@user.UserID"
                                                  class="badge @(user.IsActive ? "bg-success" : "bg-danger")">
                                                @(user.IsActive ? "Активен" : "Неактивен")
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <div class="d-flex justify-content-center">
                                                <a href="@Url.Action("Edit", "User", new { id = user.UserID })"
                                                   class="btn btn-icon btn-outline-primary btn-sm mx-1"
                                                   title="Редактировать"
                                                   data-toggle="tooltip">
                                                    <i class="fas fa-pencil-alt"></i>
                                                </a>
                                                <a href="@Url.Action("Details", "User", new { id = user.UserID })"
                                                   class="btn btn-icon btn-outline-info btn-sm mx-1"
                                                   title="Подробнее"
                                                   data-toggle="tooltip">
                                                    <i class="fas fa-file-alt"></i>
                                                </a>
                                                <button type="button" id="toggle-btn-@user.UserID"
                                                        class="btn btn-icon btn-outline-@(user.IsActive ? "danger" : "success") btn-sm mx-1"
                                                        title="@(user.IsActive ? "Деактивировать" : "Активировать")"
                                                        data-toggle="tooltip"
                                                        onclick="toggleUserStatus(@user.UserID, @user.IsActive.ToString().ToLower())">
                                                    <i class="fas @(user.IsActive ? "fa-user-slash" : "fa-user-check")"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style>

</style>


@section Scripts {
    <script>

        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });

        function toggleUserStatus(userId, isActive) {
            const action = isActive ? 'деактивировать' : 'активировать';

            if (confirm(`Вы уверены, что хотите ${action} этого пользователя?`)) {
                $.ajax({
                    url: '@Url.Action("ToggleStatus", "User")',
                    type: 'POST',
                    data: {
                        id: userId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            // Обновляем бейдж статуса
                            const statusBadge = $(`#status-badge-${userId}`);
                            statusBadge
                                .text(response.isActive ? "Активен" : "Неактивен")
                                .removeClass('bg-success bg-danger')
                                .addClass(response.isActive ? 'bg-success' : 'bg-danger');

                            // Обновляем кнопку
                            const toggleBtn = $(`#toggle-btn-${userId}`);
                            const tooltipInstance = bootstrap.Tooltip.getInstance(toggleBtn[0]);
                            toggleBtn
                                .removeClass('btn-outline-danger btn-outline-success')
                                .addClass(response.isActive ? 'btn-outline-danger' : 'btn-outline-success')
                                .attr('title', response.isActive ? 'Деактивировать' : 'Активировать')
                                .attr('data-bs-original-title', response.isActive ? 'Деактивировать' : 'Активировать')
                                .attr('onclick', `toggleUserStatus(${userId}, ${response.isActive})`)
                                .html(response.isActive
                                    ? '<i class="fas fa-user-slash"></i>'
                                    : '<i class="fas fa-user-check"></i>');

                                            if (tooltipInstance) {
            tooltipInstance.setContent({ '.tooltip-inner': response.isActive ? 'Деактивировать' : 'Активировать' });
            tooltipInstance.hide();
        }

                            showToast('Успех', response.message, 'success');
                        } else {
                            showToast('Ошибка', response.message, 'error');
                        }
                    },
                    error: function (xhr) {
                        showToast('Ошибка', xhr.responseText || 'Произошла ошибка', 'error');
                    }
                });
            }
        }

        function showToast(title, message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;
            toast.innerHTML = `
                <strong>${title}</strong>
                <span>${message}</span>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.add('fade-out');
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }

        $(document).ready(function () {
            setTimeout(function () {
                $(".alert").fadeTo(500, 0).slideUp(500, function () {
                    $(this).remove();
                });
            }, 5000);
        });
    </script>
}

@functions {

    string GetRoleColor(string roleName)
    {
        switch (roleName.ToLower())
        {
            case "admin": return "#e74c3c";
            case "manager": return "#f39c12";
            case "user": return "#2ecc71";
            default: return "#95a5a6";
        }
    }

}